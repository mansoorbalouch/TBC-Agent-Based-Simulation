classdef BondingCurve
    properties
        functionType string;
        buyFunction function_handle;
        sellFunction function_handle;
        deltaSupply function_handle;
        costDeltaSupply function_handle;

    end

    methods 
        function BondingCurveObj = BondingCurve(functionType)
            if narg > 0  
                BondingCurveObj.functionType = functionType;
                BondingCurveObj.buyFunction = buyFunction;
                BondingCurveObj.sellFunction = sellFunction;

                if functionType == "linear"
                    BondingCurveObj.buyFunction = @(s, m, c) m * s + c;
                    BondingCurveObj.sellFunction = @(s, m, c) m * s + c;
                    BondingCurveObj.deltaSupply = deltaSupply;
                    BondingCurveObj.costDeltaSupply = @(s, m, c, deltaSupply) m/2 * (deltaSupply^2 + 2*s*deltaSupply) + c*deltaSupply ;
                
                elseif functionType == "polynomial"
                    BondingCurveObj.buyFunction = @(s) m * s ^ n + c;
                    BondingCurveObj.sellFunction = @(s) m * s + c;
                    BondingCurveObj.deltaSupply = deltaSupply;
                    BondingCurveObj.costDeltaSupply = @(s, deltaSupply) m/2 * (deltaSupply^2 + 2*s*deltaSupply) + c*deltaSupply ;
                    
                elseif functionType == "sigmoid"
                    BondingCurveObj.buyFunction = @(s,c1,c2,c) c1 * ((s-c2)/(sqrt((s-c2)^2 + c)) + 1);
                    BondingCurveObj.sellFunction = @(s,c1,c2,c) c1 * ((s-c2)/(sqrt((s-c2)^2 + c)) + 1);
                    BondingCurveObj.deltaSupply = deltaSupply;
                    BondingCurveObj.costDeltaSupply = @(s,c1,c2,c) c1 * (sqrt((s-c2)^2 + c) + s) - c1 * (sqrt(c2^2 + c)) ;

                elseif functionType == "sublinear"

                end

            end
        end

    end
end

